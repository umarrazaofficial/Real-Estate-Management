import React, { useEffect, useState } from 'react';
import { AddStoreModalWrapper } from './AddStoreModal.style';
import Form from '../../molecules/Form/Form';
import Field from '../Field';
import { useForm } from '../../molecules/Form';
import LocationIcon from '../../../assets/location.png';
import Button from '../../molecules/Button';
import ModalContainer from '../../molecules/ModalContainer';
import GoogleLocationSelector from '../GoogleLocationSelector';
import { generatePsscode } from '../../../helpers/common';
import storeService from '../../../services/storeService';
import Toast from '../../molecules/Toast';
import adminService from '../../../services/adminService';
import { MerchantCategoriesData } from '../../MerchantCategories';

const AddStoreModal = ({ AddDeviceModal, onSubmit, setSubmission, data, refetch, isEdit }) => {
  const [form] = useForm();
  // const [location, setLocation] = useState('');

  // const { first_name, last_name, email } = data?.owner;
  // const { _id } = data;
  const handelSubmit = async e => {
    if (!isEdit) {
      const payload = {
        merchant_category: e?.channelMerchantCategory?.value,
        name: e?.channelName,
        businessId: data?.businessDetails?.id,
      };
      try {
        await storeService.addChannel(payload);
        onSubmit();
        Toast({
          type: 'success',
          message: 'Store added successfully',
        });
        refetch();
      } catch (error) {
        Toast({
          type: 'error',
          message: error.message,
        });
      }
    } else {
      const editPayload = {
        merchant_category: e?.channelMerchantCategory?.value,
        name: e?.channelName,
        businessId: data?.businessDetails?.id,
        // address: { value: storeLocation },
        // title: storeName.trim(),
        // report_print_time: values?.report_print_time,
      };
      try {
        await storeService.editStore({ _id: isEdit?._id, ...editPayload });
        onSubmit();
        refetch();
        Toast({
          type: 'success',
          message: 'Store Updated successfully',
        });
      } catch (error) {
        Toast({
          type: 'error',
          message: error.message,
        });
      }
    }
  };
  // const onAutoPasscodeGenerate = () => {
  //   const autoGeneratedPasscode = generatePsscode(4);

  //   form.setFieldsValue({
  //     passcode: String(autoGeneratedPasscode),
  //   });
  // };

  useEffect(() => {
    if (isEdit) {
      form.setFieldsValue({
        channelName: isEdit?.name,
        // channelMerchantCategory: isEdit?.merchant_category || '',
      });
    }
  }, [isEdit, form]);
  // useEffect(() => {
  //   if (location !== '') {
  //     form.setFieldsValue({
  //       storeLocation: location?.formatted_address,
  //     });
  //   }
  // }, [location, form]);

  return (
    <>
      <AddStoreModalWrapper>
        <Form form={form} onSubmit={handelSubmit}>
          <div className="input-wrap">
            <Form.Item
              type="text"
              name="channelName"
              sm
              rounded
              placeholder="Enter Name"
              label="Channel Name"
              rules={[
                {
                  required: true,
                },
              ]}>
              <Field maxLength={40} />
            </Form.Item>
            <Form.Item
              type="select"
              menuPosition="fixed"
              name="channelType"
              sm
              rounded
              placeholder="Select Type"
              label="Channel Type">
              <Field />
            </Form.Item>
            <Form.Item
              type="select"
              name="channelMerchantCategory"
              options={MerchantCategoriesData}
              sm
              rounded
              placeholder="Select Merchant Category"
              label="Merchant Category"
              menuPosition="fixed"
              rules={[
                {
                  required: true,
                },
              ]}>
              <Field />
            </Form.Item>
            <Form.Item type="text" name="url" sm rounded placeholder="Enter Url" label="Url">
              <Field />
            </Form.Item>
            {/* <ModalContainer
              width="711"
              title="Add Store Location"
              btnComponent={({ onClick }) => (
                <Form.Item
                  noMargin
                  type="text"
                  name="storeLocation"
                  sm
                  rounded
                  suffix={<img src={LocationIcon} alt="locationIcon" />}
                  placeholder="Enter Location"
                  label="Store Location"
                  onClick={onClick}
                  rules={[
                    {
                      required: true,
                    },
                  ]}>
                  <Field maxLength={40} />
                </Form.Item>
              )}
              content={({ onClose }) => (
                <GoogleLocationSelector
                  selectedAddress={location}
                  value={location}
                  onSubmit={onClose}
                  open={true}
                  setCurrentAddress={value => setLocation(value)}
                />
              )}
            /> 
            {!isEdit && (
              <Form.Item
                sm
                type="passcode"
                label="Passcode"
                name="passcode"
                placeholder="Passcode"
                disabled
                onAutoPasscodeGenerate={onAutoPasscodeGenerate}
                rules={[
                  {
                    required: true,
                  },
                  { pattern: /^\d{4}$/, message: 'Minimum Digits length is 4' },
                ]}>
                <Field />
              </Form.Item>
            )}
            <Form.Item
              sm
              type="text"
              label="Auto print receipt time(00:00:01 - 23:59:59)"
              name="report_print_time"
              placeholder="HH:MM:SS"
              rules={[
                {
                  required: true,
                },
                {
                  pattern: /^(?:[01]?\d|2[0-3]):[0-5]\d:[0-5]\d$/,
                  message: 'Invalid time format. Please use HH:mm:ss (e.g. 05:10:00)',
                },
              ]}>
              <Field />
            </Form.Item>
            */}
          </div>
          {/* {!isEdit && (
            <>
              <strong className="form-subtitle">Owner Details</strong>
              <div className="input-wrap">
                <Form.Item
                  noMargin
                  type="text"
                  name="first_name"
                  sm
                  rounded
                  placeholder="Enter Owner's First Name"
                  label="Owner First Name"
                  rules={[
                    { required: true },
                    {
                      pattern: /^[a-zA-Z\s]+$/,
                      message: 'First name should be Alphabets.',
                    },
                    {
                      pattern: /^[a-zA-Z\s]{3,}$/,
                      message: 'Owner first name must be minimum of 3 characters.',
                    },
                    {
                      pattern: /^[a-zA-Z\s]{3,40}$/,
                      message: 'Owner first name should be maximum of 40 characters.',
                    },
                  ]}>
                  <Field maxLength={40} />
                </Form.Item>

                <Form.Item
                  noMargin
                  type="text"
                  name="last_name"
                  sm
                  rounded
                  placeholder="Enter Owner's Last Name"
                  label="Owner Last Name"
                  rules={[
                    { required: true },
                    {
                      pattern: /^[a-zA-Z\s]+$/,
                      message: 'Last name should be Alphabets.',
                    },
                    {
                      pattern: /^[a-zA-Z\s]{3,}$/,
                      message: 'Owner last name must be minimum of 3 characters.',
                    },
                    {
                      pattern: /^[a-zA-Z\s]{3,40}$/,
                      message: 'Owner last name should be maximum of 40 characters.',
                    },
                  ]}>
                  <Field maxLength={40} />
                </Form.Item>
                <Form.Item
                  type="text"
                  name="email"
                  sm
                  rounded
                  placeholder="Enter Email Address"
                  label="Owner Email"
                  rules={[
                    { required: true },
                    { email: true, message: 'Please enter a valid owner email address.' },
                    { max: 40, message: 'Email should be at max 40 characters!' },
                  ]}>
                  <Field maxLength={40} />
                </Form.Item>
              </div>
            </>
          )} */}
          <Button sm width="163px">
            {isEdit ? 'Save Changes' : 'Add Channel'}
          </Button>
        </Form>
      </AddStoreModalWrapper>
    </>
  );
};

export default AddStoreModal;
